// send.go - Send related routines.
// Copyright (C) 2017  Yawning Angel.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package minclient

import (
	"fmt"
	"time"

	"github.com/katzenpost/core/constants"
	"github.com/katzenpost/core/crypto/rand"
	"github.com/katzenpost/core/epochtime"
	"github.com/katzenpost/core/sphinx"
	"github.com/katzenpost/core/sphinx/commands"
	sConstants "github.com/katzenpost/core/sphinx/constants"
	"github.com/katzenpost/minclient/internal/path"
)

// SendUnreliableCiphertext sends the ciphertext b to the user/provider, in
// an unreliable manner.  No notification of the packet being received will
// be generated by the recipient's provider.
func (c *Client) SendUnreliableCiphertext(user, provider string, b []byte) error {
	if len(user) > sConstants.RecipientIDLength {
		return fmt.Errorf("minclient: invalid recipient: '%v'", user)
	}
	if len(b) != constants.UserForwardPayloadLength {
		return fmt.Errorf("minclient: invalid ciphertext size: %v", len(b))
	}

	// Wrap the ciphertext in a BlockSphinxCiphertext.
	payload := make([]byte, 2+sphinx.SURBLength, 2+sphinx.SURBLength+len(b))
	payload = append(payload, b...)

	// Get the current PKI document, and generate a randomized forward path.
	doc := c.pki.currentDocument()
	if doc == nil {
		return fmt.Errorf("minclient: no PKI document for current epoch")
	}
	descs, err := path.New(c.rng, doc, c.cfg.Provider, provider)
	if err != nil {
		return err
	}

	var path []*sphinx.PathHop
	for {
		now := time.Unix(c.pki.skewedUnixTime(), 0)
		then := now
		path = make([]*sphinx.PathHop, 0, len(descs))
		for idx, desc := range descs {
			h := &sphinx.PathHop{}
			copy(h.ID[:], desc.IdentityKey.Bytes())
			epoch, _, _ := epochtime.FromUnix(then.Unix())
			if k, ok := desc.MixKeys[epoch]; !ok {
				// Should never happen, but check anyway.
				return fmt.Errorf("minclient: node %v missing mixkey for epoch %v", desc.IdentityKey, epoch)
			} else {
				h.PublicKey = k
			}

			if idx != len(descs)-1 {
				// Next.
				nextCmd := &commands.NextNodeHop{}
				copy(nextCmd.ID[:], descs[idx+1].IdentityKey.Bytes())
				h.Commands = append(h.Commands, nextCmd)

				// Delay.
				delay := uint64(rand.Exp(c.rng, doc.Lambda))
				if delay > doc.MaxDelay {
					delay = doc.MaxDelay
				}
				then = then.Add(time.Duration(delay) * time.Millisecond)
				delayCmd := &commands.NodeDelay{
					Delay: uint32(delay),
				}
				h.Commands = append(h.Commands, delayCmd)
			} else {
				// Recipient.
				recipCmd := &commands.Recipient{}
				copy(recipCmd.ID[:], []byte(user))
				h.Commands = append(h.Commands, recipCmd)
			}
			path = append(path, h)
		}

		// It is possible, but unlikely that a series of delays exceeding
		// the PKI publication imposted limitations will be selected.  When
		// that happens, the path selection must be redone.
		if then.Sub(now) < epochtime.Period*2 {
			break
		}

		// XXX: This should probably give up after a while.
	}

	pkt, err := sphinx.NewPacket(rand.Reader, path, payload)
	if err != nil {
		return err
	}

	return c.conn.sendPacket(pkt)
}
